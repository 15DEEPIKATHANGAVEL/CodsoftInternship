#include <iostream>
#include <vector>

using namespace std;

// Function prototypes
void printBoard(const vector<vector<char>>& board);
bool checkWin(const vector<vector<char>>& board, char mark);
bool checkDraw(const vector<vector<char>>& board);
bool isValidMove(const vector<vector<char>>& board, int row, int col);
void makeMove(vector<vector<char>>& board, char mark, int row, int col);

int main() {
    vector<vector<char>> board(3, vector<char>(3, ' ')); // 3x3 board initialized with empty spaces
    int row, col;
    char currentPlayer = 'X'; // Player 'X' starts the game

    while (true) {
        printBoard(board);
        cout << "Player " << currentPlayer << ", enter your move (row column): ";
        cin >> row >> col;

        if (isValidMove(board, row, col)) {
            makeMove(board, currentPlayer, row, col);
            if (checkWin(board, currentPlayer)) {
                printBoard(board);
                cout << "Player " << currentPlayer << " wins!\n";
                break;
            } else if (checkDraw(board)) {
                printBoard(board);
                cout << "It's a draw!\n";
                break;
            }
            // Switch player
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        } else {
            cout << "Invalid move. Please try again.\n";
        }
    }

    return 0;
}

void printBoard(const vector<vector<char>>& board) {
    cout << "  0 1 2\n";
    for (int i = 0; i < 3; ++i) {
        cout << i << " ";
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j];
            if (j < 2) cout << "|";
        }
        cout << "\n";
        if (i < 2) cout << "  -----\n";
    }
}

bool checkWin(const vector<vector<char>>& board, char mark) {
    // Check rows, columns, and diagonals for a win
    for (int i = 0; i < 3; ++i) {
        if ((board[i][0] == mark && board[i][1] == mark && board[i][2] == mark) ||
            (board[0][i] == mark && board[1][i] == mark && board[2][i] == mark)) {
            return true;
        }
    }
    if ((board[0][0] == mark && board[1][1] == mark && board[2][2] == mark) ||
        (board[0][2] == mark && board[1][1] == mark && board[2][0] == mark)) {
        return true;
    }
    return false;
}

bool checkDraw(const vector<vector<char>>& board) {
    // Check if the board is full (no more empty spaces)
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == ' ') {
                return false;
            }
        }
    }
    return true;
}

bool isValidMove(const vector<vector<char>>& board, int row, int col) {
    // Check if the move is within the board boundaries and the cell is empty
    return row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ';
}

void makeMove(vector<vector<char>>& board, char mark, int row, int col) {
    board[row][col] = mark;
}
